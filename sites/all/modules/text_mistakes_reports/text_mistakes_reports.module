<?php

global $user;

drupal_add_js(drupal_get_path('module', 'text_mistakes_reports') . '/js/popup.js');
drupal_add_js(drupal_get_path('module', 'text_mistakes_reports') . '/js/grid.js');
drupal_add_js(['textMistakesReportsFields' => getFieldsSettingsForPage()], 'setting');
drupal_add_js(['textMistakesReportsAjax' => [
    'sendReportUrl' => url('text_mistakes_reports/ajax/send/report'),
    'gridDeleteUrl' => url('text_mistakes_reports/ajax/grid/delete'),
]], 'setting');
drupal_add_js(['textMistakesReportsUser' => ['username' => $user->name]], 'setting');

drupal_add_css(drupal_get_path('module', 'text_mistakes_reports') . '/css/bootstrap.min.css');

function text_mistakes_reports_help($path, $arg)
{
    switch ($path) {
        case 'admin/help#text_mistakes_reports':
            return t('A module that add popup to field types "long text" and "long text and summary" and it can send reports about mistakes to admin email.');
            break;
    }
}

function text_mistakes_reports_block_info()
{
    $blocks['text_mistakes_reports'] = [
        // The name that will appear in the block list.
        'info' => t('Sender of Text Mistakes Reports'),
        'status' => TRUE,
        'region' => 'Content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => 'node/*',
    ];

    $blocks['text_mistakes_reports_grid'] = [
        // The name that will appear in the block list.
        'info' => t('Reports Grid'),
        'status' => TRUE,
        'region' => 'Content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => 'admin/reports/text_mistakes_reports',
    ];

    return $blocks;
}

function text_mistakes_reports_block_view($delta = '')
{
    switch ($delta) {
        case 'text_mistakes_reports':
            $block['content'] = [
                '#theme' => 'text_mistakes_reports_theme',
                '#type' => 'markup',
            ];
            return $block;

        case 'text_mistakes_reports_grid':
            $block['content'] = [
                '#theme' => 'text_mistakes_reports_grid_theme',
                '#type' => 'markup',
            ];
            return $block;
    }
}

function text_mistakes_reports_theme($existing, $type, $theme, $path)
{
    return [
        'text_mistakes_reports_theme' => [
            'variables' => [],
            'template' => 'text_mistakes_reports',
        ],

        'text_mistakes_reports_grid_theme' => [
            'variables' => [
                'rows' => getReportsRowsFromTable()
            ],
            'template' => 'text_mistakes_reports_grid',
            'path' => drupal_get_path('module', 'text_mistakes_reports'),
        ],

    ];
}

function text_mistakes_reports_ajax_report()
{
    $entityType = (isset($_POST['objectType']) ? $_POST['objectType'] : null);
    $entityId = (isset($_POST['objectId']) ? $_POST['objectId'] : null);
    $entityLink = (isset($_POST['objectLink']) ? $_POST['objectLink'] : null);
    $fieldName = (isset($_POST['fieldName']) ? $_POST['fieldName'] : null);
    $selectedText = (isset($_POST['selectedText']) ? $_POST['selectedText'] : null);
    $username = (isset($_POST['username']) ? $_POST['username'] : null);

    $entityLink = $_SERVER['HTTP_HOST'] . url($entityType . '/' . $entityId);

    $entity = entity_load($entityType, array((int) $entityId));
    $bundle = $entity[$entityId]->type;

    $fieldNameLabel = field_info_instance($entityType, $fieldName, $bundle)['label'];
    $emailReceiver = field_info_field($fieldName)['text_mistakes_reports_email_receiver'];
    $fieldNameId = $fieldName;

    $currentDate = new DateTime();

    $userIP = ip_address();

    $maxAmountReportsToday = variable_get('text_mistakes_reports_max_reports');

    if (getAmountReportsByIPToday($userIP) > $maxAmountReportsToday) {

        drupal_json_output([
            'condition' => 'success',
        ]);

        db_insert('text_mistakes_report')->fields(array(
            'entity_id' => $entityId,
            'entity_type' => $entityType,
            'date' => $currentDate->format('Y-m-d H:i:s'),
            'field_name' => $fieldName,
            'selected_text' => $selectedText,
            'username' => $username,
            'ip' => $userIP,
        ))->execute();

        drupal_flush_all_caches();

        drupal_mail(
            'text_mistakes_reports',
            'mistake_report_mail',
            $emailReceiver,
            language_default(),
            $params = [
                'Entity ID' => $entityId,
                'Entity Type' => $entityType,
                'Entity Link' => $entityLink,
                'Date of Create' => $currentDate->format('Y-m-d H:i:s'),
                'Field Name Label' => $fieldNameLabel,
                'Field Name ID' => $fieldNameId,
                'Selected Text' => $selectedText,
                'Username' => $username,
                'User IP' => $userIP,
            ],
            $from = 'demo@demo.com',
            $send = TRUE
        );

    } else {
        drupal_json_output([
            'condition' => 'failure',
            'errorText' => 'Sorry but you cant sending reports for this field anymore today.'
        ]);
    }
}

function text_mistakes_reports_ajax_grid_delete()
{
    $reportId = (isset($_POST['reportId']) ? $_POST['reportId'] : null);

    db_delete('text_mistakes_report')
        ->condition('report_id', $reportId)
        ->execute();

    drupal_flush_all_caches();

    drupal_json_output([
        'condition' => 'success',
    ]);
}

function text_mistakes_reports_mail ($key, &$message, $params) {
    switch ($key) {
        case 'mistake_report_mail':
            $message['subject'] = t('Mistake Report');

            foreach ($params as $key => $value) {
                if ($key === 'Entity Link') {
                    $message['body'][] = t('@key: <a href="@value">@value</a>,', ['@key' => $key, '@value' => $value]);
                } else {
                    $message['body'][] = t('@key: @value,', ['@key' => $key, '@value' => $value]);
                }
            }

            break;
    }
}

function text_mistakes_reports_menu()
{
    $items = [];

    $items['admin/config/content/text_mistakes_reports'] = [
        'title' => 'Sender of Text Mistakes Reports',
        'description' => 'A module that add popup to field types "long text"',
        'page callback' => 'drupal_get_form',
        'page arguments' => ['text_mistakes_reports_form'],
        'access arguments' => ['access administration pages'],
        'type' => MENU_NORMAL_ITEM,
    ];

    $items['admin/reports/text_mistakes_reports'] = [
        'title' => 'Sender of Text Mistakes Reports',
        'description' => 'A module that add popup to field types "long text"',
        'page callback' => 'drupal_get_form',
        'page arguments' => ['text_mistakes_reports_grid_form'],
        'access arguments' => ['access administration pages'],
        'type' => MENU_NORMAL_ITEM,
    ];

    $items['text_mistakes_reports/ajax/send/report'] = [
        'type' => MENU_CALLBACK,
        'page callback' => 'text_mistakes_reports_ajax_report',
        'access arguments' => ['access content'],
    ];

    $items['text_mistakes_reports/ajax/grid/delete'] = [
        'type' => MENU_CALLBACK,
        'page callback' => 'text_mistakes_reports_ajax_grid_delete',
        'access arguments' => ['access content'],
    ];

    return $items;
}

function text_mistakes_reports_grid_form($form, &$form_state)
{
    //for dont writing system warning for report page
    return $form;
}

function text_mistakes_reports_form($form, &$form_state)
{
    $form['text_mistakes_reports_email_receiver'] = array(
        '#type' => 'textfield',
        '#title' => t('Email where sending reports'),
        '#default_value' => variable_get('text_mistakes_reports_email_receiver', variable_get('site_mail', '')),
        '#required' => TRUE,
    );

    $form['text_mistakes_reports_max_text_length'] = array(
        '#type' => 'textfield',
        '#title' => t('Maximum size of text length'),
        '#default_value' => variable_get('text_mistakes_reports_max_text_length', 50),
        '#size' => 4,
        '#maxlength' => 4,
        '#description' => t('The maximum size of text that can be to report'),
        '#element_validate' => array('element_validate_integer_positive'),
        '#required' => TRUE,
    );

    $form['text_mistakes_reports_report_text'] = array(
        '#type' => 'textarea',
        '#title' => t('Report Text'),
        '#default_value' => variable_get('text_mistakes_reports_report_text', ''),
        '#description' => t('The maximum size of text that can be to report'),
        '#required' => TRUE,
    );

    $form['text_mistakes_reports_max_reports'] = array(
        '#type' => 'textfield',
        '#title' => t('Maximum number of reports'),
        '#default_value' => variable_get('text_mistakes_reports_max_reports', 3),
        '#size' => 4,
        '#maxlength' => 4,
        '#description' => t('The maximum number of reports to send with one IP'),
        '#element_validate' => array('element_validate_integer_positive'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

function text_mistakes_reports_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id)
{
    $field = $form['#field'];
    $defaultValue = getDefaultValues($field);

    if (isValidFieldType($field['type'])) {
        $form['field']['text_mistakes_reports_enabled'] = array(
            '#type' => 'select',
            '#title' => t('Enable "Text Mistakes Reports" Module'),
            '#options' => [
                '1' => 'yes',
                '0' => 'no'
            ],
            '#default_value' => $defaultValue['enabled'],
        );

        $form['field']['text_mistakes_reports_email_receiver'] = array(
            '#type' => 'textfield',
            '#title' => t('Email where sending reports'),
            '#default_value' => $defaultValue['email_receiver'],
        );

        $form['field']['text_mistakes_reports_max_text_length'] = array(
            '#type' => 'textfield',
            '#title' => t('Maximum size of text length'),
            '#default_value' => $defaultValue['max_text_length'],
            '#description' => t('The maximum size of text that can be to report'),
            '#element_validate' => array('element_validate_integer_positive'),
        );

        $form['field']['text_mistakes_reports_report_text'] = array(
            '#type' => 'textarea',
            '#title' => t('Report Text'),
            '#default_value' => $defaultValue['report_text'],
            '#description' => t('The maximum size of text that can be to report'),
            '#value_callback' => 'text_mistakes_reports_form_field_ui_field_edit_form_field_value',
        );
    }
}

function text_mistakes_reports_form_field_ui_field_edit_form_field_value($element, $input = FALSE, $form_state = array())
{
    if (empty($input)) {
        return variable_get('text_mistakes_reports_report_text');
    } else {
        return $input;
    }
}

function getDefaultValues($field)
{
    $defaultValue = [];

    $globalValueReceiverEmail = variable_get('text_mistakes_reports_email_receiver');
    $globalValueMaxTextLength = variable_get('text_mistakes_reports_max_text_length');
    $globalValueReportText = variable_get('text_mistakes_reports_report_text');

    $defaultValue['email_receiver'] = !empty($field['text_mistakes_reports_email_receiver']) ?
        $field['text_mistakes_reports_email_receiver'] :
        $globalValueReceiverEmail;

    $defaultValue['max_text_length'] = !empty($field['text_mistakes_reports_max_text_length']) ?
        $field['text_mistakes_reports_max_text_length'] :
        $globalValueMaxTextLength;

    $defaultValue['report_text'] = !empty($field['text_mistakes_reports_report_text']) ?
        $field['text_mistakes_reports_report_text'] :
        $globalValueReportText;

    $defaultValue['enabled'] = key_exists('text_mistakes_reports_enabled', $field) ?
        $field['text_mistakes_reports_enabled'] :
        1;

    return $defaultValue;
}

function getFieldsSettingsForPage()
{
    $observedFields = [];
    $allFields = field_info_fields();
    foreach ($allFields as $field) {
        if ((isValidFieldType($field['type'])) && ($field['field_name'] !== 'comment_body')) {
            if (key_exists('text_mistakes_reports_enabled', $field)) {
                if ($field['text_mistakes_reports_enabled']) {
                    $observedFields[$field['field_name']]['fieldName'] = $field['field_name'];
                    $observedFields[$field['field_name']]['receiverEmail'] = $field['text_mistakes_reports_email_receiver'];
                    $observedFields[$field['field_name']]['maxLength'] = $field['text_mistakes_reports_max_text_length'];
                }
            }
        }
    }
    return $observedFields;
}

function getReportsRowsFromTable()
{
    $rows = [];

    $query = db_select('text_mistakes_report', 'r');
    $query->fields('r',[
        'report_id',
        'entity_id',
        'entity_type',
        'date',
        'field_name',
        'selected_text',
        'username',
        'ip',
    ]);
    $rows = $query->execute()->fetchAll();

    return convertRowsToNededFields($rows);
}

function getAmountReportsByIPToday($userIP)
{
    $todayDate = new DateTime();
    $query = db_select('text_mistakes_report', 'r');
    $query->fields('r',[
        'report_id',
    ]);
    $query->condition('ip', $userIP);
    $query->condition('date', $todayDate->format('Y-m-d'), '>=');
    $rows = $query->execute()->fetchAll();
    return count($rows);
}

function convertRowsToNededFields($rows)
{
    $correctRows = [];

    foreach ($rows as $key => $row) {
        $reportId = $row->report_id;
        $entityType = $row->entity_type;
        $entityId = $row->entity_id;
        $createDate = $row->date;
        $fieldNameId = $row->field_name;
        $selectedText = $row->selected_text;
        $username = $row->username;
        $ipClien = $row->ip;

        $entityLink = $_SERVER['HTTP_HOST'] . url($entityType . '/' . $entityId);

        $entity = entity_load($entityType, array((int) $entityId));
        $bundle = $entity[$entityId]->type;
        $fieldNameLabel = field_info_instance($entityType, $fieldNameId, $bundle)['label'];

        $correctRows[$key] = [
            'Report ID' => $reportId,
            'Entity ID' => $entityId,
            'Entity Type' => $entityType,
            'Entity Link' => $entityLink,
            'Date of Create' => $createDate,
            'Field Name Label' => $fieldNameLabel,
            'Field Name ID' => $fieldNameId,
            'Selected Text' => $selectedText,
            'Username' => $username,
            'User IP' => $ipClien,
        ];
    }

    return $correctRows;
}

function isValidFieldType($fieldType)
{
    return ($fieldType === 'text_long') || ($fieldType === 'text_with_summary');
}

//function text_mistakes_reports_form_alter(&$form, &$form_state, $form_id) {
//    drupal_set_message($form_id);
//    drupal_set_message(var_dump($form));
//}
