<?php
global $user;
drupal_add_js(drupal_get_path('module', 'text_mistakes_reports') . '/js/popup.js');
drupal_add_js(['textMistakesReportsFields' => getFieldsSettingsForPage()], 'setting');
drupal_add_js(['textMistakesReportsAjax' => ['ajaxUrl' => url('custom/ajax')]], 'setting');
drupal_add_js(['textMistakesReportsUser' => ['username' => $user->name]], 'setting');

drupal_add_css(drupal_get_path('module', 'text_mistakes_reports') . '/css/bootstrap.min.css');

function text_mistakes_reports_help($path, $arg)
{
    switch ($path) {
        case 'admin/help#text_mistakes_reports':
            return t('A module that add popup to field types "long text" and "long text and summary" and it can send reports about mistakes to admin email.');
            break;
    }
}

function text_mistakes_reports_block_info()
{
    $blocks['text_mistakes_reports'] = [
        // The name that will appear in the block list.
        'info' => t('Sender of Text Mistakes Reports'),
        'status' => TRUE,
        'region' => 'Content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => 'node/*',
    ];
    return $blocks;
}

function text_mistakes_reports_block_view($delta = '')
{
    switch ($delta) {
        case 'text_mistakes_reports':
            $block['content'] = [
                '#theme' => 'text_mistakes_reports_theme',
                '#type' => 'markup',
            ];
            return $block;
    }
}

function text_mistakes_reports_theme($existing, $type, $theme, $path)
{
    return [
        'text_mistakes_reports_theme' => [
            'variables' => [],
            'template' => 'text_mistakes_reports',
        ],

    ];
}

function text_mistakes_reports_ajax_report() {
    $objectType = (isset($_POST['objectType']) ? $_POST['objectType'] : null);
    $objectId = (isset($_POST['objectId']) ? $_POST['objectId'] : null);
    $objectLink = (isset($_POST['objectLink']) ? $_POST['objectLink'] : null);
    $fieldName = (isset($_POST['fieldName']) ? $_POST['fieldName'] : null);
    $selectedText = (isset($_POST['selectedText']) ? $_POST['selectedText'] : null);
    $username = (isset($_POST['username']) ? $_POST['username'] : null);

    $objectLink = $_SERVER['HTTP_HOST'] . url($objectType . '/' . $objectId);

    $entity = entity_load($objectType, array((int) $objectId));
    $bundle = $entity[$objectId]->type;

    $fieldNameLabel = field_info_instance($objectType, $fieldName, $bundle)['label'];
    $fieldNameId = $fieldName;

    $currentDate = new DateTime();

    $ipClien = ip_address();

    drupal_json_output([
        'objectType' => $objectType,
        'objectId'=> $objectId,
        'objectLink'=> $objectLink,
        'fieldName'=> $username,
        'selectedText'=> $selectedText
    ]);

    db_insert('text_mistakes_report')->fields(array(
        'entity_id' => $objectId,
        'entity_type' => $objectType,
        'date' => $currentDate->format('Y-m-d H:i:s'),
        'field_name' => $fieldName,
        'selected_text' => $selectedText,
        'username' => $username,
        'ip' => $ipClien,
    ))->execute();

//    drupal_mail(
//        'text_mistakes_reports',
//        'mymail',
//        variable_get('text_mistakes_reports_email_receiver'),
//        language_default(),
//        $params = array('username' => 'John Potato'),
//        $from = 'demo@demo.com',
//        $send = TRUE
//    );

}

function text_mistakes_reports_mail ($key, &$message, $params) {
    switch ($key) {
        case 'mymail':
            // Set headers etc
            $message['to'] = variable_get('text_mistakes_reports_email_receiver');
            $message['subject'] = t('Hello');
            $message['body'][] = t('Hello @username,', array('@username' => $params['username']));
            $message['body'][] = t('The main part of the message.');
            break;
    }
}

function text_mistakes_reports_menu()
{
    $items = array();

    $items['admin/config/content/text_mistakes_reports'] = array(
        'title' => 'Sender of Text Mistakes Reports',
        'description' => 'A module that add popup to field types "long text"',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('text_mistakes_reports_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/reports/text_mistakes_reports'] = array(
        'title' => 'Sender of Text Mistakes Reports',
        'description' => 'A module that add popup to field types "long text"',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('text_mistakes_reports_form_grid'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['custom/ajax'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'text_mistakes_reports_ajax_report',
        'access arguments' => array('access content'),
    );

    return $items;
}

function text_mistakes_reports_form_grid($form, &$form_state)
{
    $form['text_mistakes'] = array(
        '#type' => 'textfield',
        '#title' => t('Email where sending reports'),
        '#default_value' => variable_get('text_mistakes', variable_get('site_mail', '')),
        '#required' => TRUE,
        '#theme' => 'text_mistakes_reports_grid_theme'
    );

    return system_settings_form($form);
}

function text_mistakes_reports_grid_theme($existing, $type, $theme, $path)
{
    return [
        'text_mistakes_reports_grid_theme' => [
            'render element' => 'form',
            'variables' => [],
            'template' => 'text_mistakes_reports_grid',
        ],

    ];
}

function text_mistakes_reports_form($form, &$form_state)
{
    $form['text_mistakes_reports_receiver_email'] = array(
        '#type' => 'textfield',
        '#title' => t('Email where sending reports'),
        '#default_value' => variable_get('text_mistakes_reports_receiver_email', variable_get('site_mail', '')),
        '#required' => TRUE,
    );

    $form['text_mistakes_reports_max_text_length'] = array(
        '#type' => 'textfield',
        '#title' => t('Maximum size of text length'),
        '#default_value' => variable_get('text_mistakes_reports_max_text_length', 50),
        '#size' => 4,
        '#maxlength' => 4,
        '#description' => t('The maximum size of text that can be to report'),
        '#element_validate' => array('element_validate_integer_positive'),
        '#required' => TRUE,
    );

    $form['text_mistakes_reports_report_text'] = array(
        '#type' => 'textarea',
        '#title' => t('Report Text'),
        '#default_value' => variable_get('text_mistakes_reports_report_text', ''),
        '#description' => t('The maximum size of text that can be to report'),
        '#required' => TRUE,
    );

    $form['text_mistakes_reports_max_reports'] = array(
        '#type' => 'textfield',
        '#title' => t('Maximum number of reports'),
        '#default_value' => variable_get('text_mistakes_reports_max_reports', 3),
        '#size' => 4,
        '#maxlength' => 4,
        '#description' => t('The maximum number of reports to send with one IP'),
        '#element_validate' => array('element_validate_integer_positive'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

function text_mistakes_reports_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id)
{
    $field = $form['#field'];
    $defaultValue = getDefaultValues($field);

    if (isValidFieldType($field['type'])) {
        $form['field']['text_mistakes_reports_enabled'] = array(
            '#type' => 'select',
            '#title' => t('Enable "Text Mistakes Reports" Module'),
            '#options' => [
                '1' => 'yes',
                '0' => 'no'
            ],
            '#default_value' => $defaultValue['enabled'],
        );

        $form['field']['text_mistakes_reports_receiver_email'] = array(
            '#type' => 'textfield',
            '#title' => t('Email where sending reports'),
            '#default_value' => $defaultValue['receiver_email'],
        );

        $form['field']['text_mistakes_reports_max_text_length'] = array(
            '#type' => 'textfield',
            '#title' => t('Maximum size of text length'),
            '#default_value' => $defaultValue['max_text_length'],
            '#description' => t('The maximum size of text that can be to report'),
            '#element_validate' => array('element_validate_integer_positive'),
        );

        $form['field']['text_mistakes_reports_report_text'] = array(
            '#type' => 'textarea',
            '#title' => t('Report Text'),
            '#default_value' => $defaultValue['report_text'],
            '#description' => t('The maximum size of text that can be to report'),
            '#value_callback' => 'text_mistakes_reports_form_field_ui_field_edit_form_field_value',
        );

        $form['field']['text_mistakes_reports_max_reports'] = array(
            '#type' => 'textfield',
            '#title' => t('Maximum number of reports'),
            '#default_value' => $defaultValue['max_reports'],
            '#description' => t('The maximum number of reports to send with one IP'),
            '#element_validate' => array('element_validate_integer_positive'),
        );
    }
}

function text_mistakes_reports_form_field_ui_field_edit_form_field_value($element, $input = FALSE, $form_state = array())
{
    if (empty($input)) {
        return variable_get('text_mistakes_reports_report_text');
    } else {
        return $input;
    }
}

function getDefaultValues($field)
{
    $defaultValue = [];

    $globalValueReceiverEmail = variable_get('text_mistakes_reports_email_receiver');
    $globalValueMaxTextLength = variable_get('text_mistakes_reports_max_text_length');
    $globalValueReportText = variable_get('text_mistakes_reports_report_text');
    $globalValueMaxReport = variable_get('text_mistakes_reports_max_reports');

    $defaultValue['receiver_email'] = !empty($field['text_mistakes_reports_receiver_email']) ?
        $field['text_mistakes_reports_receiver_email'] :
        $globalValueReceiverEmail;

    $defaultValue['max_text_length'] = !empty($field['text_mistakes_reports_max_text_length']) ?
        $field['text_mistakes_reports_max_text_length'] :
        $globalValueMaxTextLength;

    $defaultValue['report_text'] = !empty($field['text_mistakes_reports_report_text']) ?
        $field['text_mistakes_reports_report_text'] :
        $globalValueReportText;

    $defaultValue['max_reports'] = !empty($field['text_mistakes_reports_max_reports']) ?
        $field['text_mistakes_reports_max_reports'] :
        $globalValueMaxReport;

    $defaultValue['enabled'] = key_exists('text_mistakes_reports_enabled', $field) ?
        $field['text_mistakes_reports_enabled'] :
        1;

    return $defaultValue;
}

function getFieldsSettingsForPage()
{
    $observedFields = [];
    $allFields = field_info_fields();
    foreach ($allFields as $field) {
        if ((isValidFieldType($field['type'])) && ($field['field_name'] !== 'comment_body')) {
            if (key_exists('text_mistakes_reports_enabled', $field)) {
                if ($field['text_mistakes_reports_enabled']) {
                    $observedFields[$field['field_name']]['fieldName'] = $field['field_name'];
                    $observedFields[$field['field_name']]['receiverEmail'] = $field['text_mistakes_reports_receiver_email'];
                    $observedFields[$field['field_name']]['maxLength'] = $field['text_mistakes_reports_max_text_length'];
                    $observedFields[$field['field_name']]['reportText'] = $field['text_mistakes_reports_report_text'];
                }
            }
        }
    }
    return $observedFields;
}

function isValidFieldType($fieldType)
{
    return ($fieldType === 'text_long') || ($fieldType === 'text_with_summary');
}

//function text_mistakes_reports_form_alter(&$form, &$form_state, $form_id) {
//    drupal_set_message($form_id);
//    drupal_set_message(var_dump($form));
//}
