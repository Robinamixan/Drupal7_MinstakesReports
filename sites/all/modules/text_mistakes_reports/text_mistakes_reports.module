<?php

/**
 * Amount records on page of report grid
 */
const RECORD_PER_PAGE = 4;

/**
 * Implements hook_help().
 */
function text_mistakes_reports_help($path, $arg) {
  $messagePart1 = 'A module that add popup to field types "long text" and "long text and summary"';
  $messagePart2 = ' and it can send reports about mistakes to admin email.';
  switch ($path) {
    case 'admin/help#text_mistakes_reports':
      return t($messagePart1 . $messagePart2);
      break;
  }
}

/**
 * Implements hook_block_info().
 */
function text_mistakes_reports_block_info() {
  $blocks['text_mistakes_reports_popup'] = [
    'info' => t('Sender of Text Mistakes Reports'),
    'status' => TRUE,
    'region' => 'content',
  ];
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function text_mistakes_reports_block_view($delta = '') {
  global $user;
  switch ($delta) {
    case 'text_mistakes_reports_popup':
      $fieldsSettings = text_mistakes_reports_get_fields_settings_for_page();
      $sendReportUrl = ['sendReportUrl' => url('text_mistakes_reports/ajax/send/report')];
      $userId = ['userId' => $user->uid];

      $block['content'] = [
        '#theme' => 'text_mistakes_reports_popup_theme',
        '#type' => 'markup',

        '#attached' => [
          'css' => [
            drupal_get_path('module',
              'text_mistakes_reports') . '/css/popup.css',

          ],
          'js' => [
            drupal_get_path('module', 'text_mistakes_reports') . '/js/popup.js',
            [
              'data' => ['textMistakesReportsFields' => $fieldsSettings],
              'type' => 'setting',
            ],
            [
              'data' => ['textMistakesReportsAjax' => $sendReportUrl],
              'type' => 'setting',
            ],
            [
              'data' => ['textMistakesReportsUser' => $userId],
              'type' => 'setting',
            ],
          ],
        ],
      ];
      return $block;
  }
}

/**
 * Implements hook_theme().
 */
function text_mistakes_reports_theme($existing, $type, $theme, $path) {
  return [
    'text_mistakes_reports_popup_theme' => [
      'variables' => [],
      'template' => 'text_mistakes_reports_popup',
      'path' => drupal_get_path('module', 'text_mistakes_reports'),
    ],

    'text_mistakes_reports_grid_theme' => [
      'variables' => [
        'rows' => [],
      ],
      'template' => 'text_mistakes_reports_grid',
      'path' => drupal_get_path('module', 'text_mistakes_reports'),
    ],
  ];
}

/**
 * Implements hook_entity_info().
 */
function text_mistakes_reports_entity_info() {
  return [
    'text_mistakes_report' => [
      'label' => t('Text Mistakes Report'),
      'base table' => 'text_mistakes_report',
      'entity keys' => [
        'id' => 'report_id',
      ],
    ],
  ];
}

/**
 * Load a single record.
 *
 * @param $id
 *
 * @return array
 */
function text_mistakes_reports_load($id, $reset = FALSE) {
  return text_mistakes_reports_load_multiple([$id], [], $reset);
}

/**
 * Load multiple records from array $ids.
 *
 * @param array $ids
 * @param array $conditions
 * @param bool $reset
 *
 * @return array
 */
function text_mistakes_reports_load_multiple(
  $ids = [],
  $conditions = [],
  $reset = FALSE
) {
  if ($ids) {
    return entity_load('text_mistakes_report', $ids, $conditions, $reset);
  }
  return entity_load('text_mistakes_report');
}

/**
 * Load multiple records in interval.
 *
 * @param $startNumber
 * @param $amount
 *
 * @return array
 */
function text_mistakes_reports_load_multiple_interval($startNumber, $amount) {
  $query = db_select('text_mistakes_report', 'r');
  $query->fields('r', [
    'report_id',
    'entity_id',
    'revision_id',
    'entity_type',
    'date_create',
    'field_name',
    'selected_text',
    'user_id',
    'user_ip',
  ]);
  $query->range($startNumber, $amount);
  $rows = $query->execute()->fetchAll();
  return $rows;
}

/**
 * Delete a single record.
 *
 * @param $id
 */
function text_mistakes_reports_delete($id) {
  text_mistakes_reports_delete_multiple([$id]);
}

/**
 * Delete multiple records from array $ids.
 *
 * @param array $ids
 */
function text_mistakes_reports_delete_multiple($ids = []) {
  if ($ids) {
    foreach ($ids as $id) {
      db_delete('text_mistakes_report')
        ->condition('report_id', $id)
        ->execute();
    }
    cache_clear_all('*', 'cache', TRUE);
  }
  else {
    db_delete('text_mistakes_report')
      ->execute();
    cache_clear_all('*', 'cache', TRUE);
  }
}

/**
 * Save a single record.
 *
 * @param array $values
 *
 * @return bool
 */
function text_mistakes_reports_save($values = []) {
  try {
    db_insert('text_mistakes_report')->fields($values)->execute();
    cache_clear_all('*', 'cache', TRUE);
  } catch (Exception $e) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Getting ajax request of mistake report, saving report,
 * sending email to receiver and sending response of process condition
 */
function text_mistakes_reports_ajax_report() {
  $entityType = (isset($_POST['objectType']) ? $_POST['objectType'] : NULL);
  $entityId = (isset($_POST['objectId']) ? $_POST['objectId'] : NULL);
  $entityLink = (isset($_POST['objectLink']) ? $_POST['objectLink'] : NULL);
  $fieldNameId = (isset($_POST['fieldName']) ? $_POST['fieldName'] : NULL);
  $selectedText = (isset($_POST['selectedText']) ? $_POST['selectedText'] : NULL);
  $userId = (isset($_POST['userId']) ? $_POST['userId'] : NULL);

  $entityLink = $_SERVER['HTTP_HOST'] . url($entityType . '/' . $entityId);
  $entity = entity_load($entityType, [(int) $entityId]);
  $bundle = $entity[$entityId]->type;

  $revisionId = $entity[$entityId]->vid ? $entity[$entityId]->vid : '';

  $fieldNameLabel = field_info_instance($entityType, $fieldNameId,
    $bundle)['label'];
  $emailReceiver = field_info_field($fieldNameId)['settings']['text_mistakes_reports_email_receiver'];

  $currentDate = new DateTime();
  $userIP = ip_address();
  $maxAmountReportsToday = variable_get('text_mistakes_reports_max_reports');

  if ((text_mistakes_reports_get_amount_reports_by_ip($userIP) + 1 <= (int) $maxAmountReportsToday) || (empty($maxAmountReportsToday))) {

    $username = $userId ? user_load($userId)->name : 'anonymous';

    $saved = text_mistakes_reports_save([
      'entity_id' => $entityId,
      'revision_id' => $revisionId,
      'entity_type' => $entityType,
      'date_create' => $currentDate->format('Y-m-d H:i:s'),
      'field_name' => $fieldNameId,
      'selected_text' => $selectedText,
      'user_id' => $userId,
      'user_ip' => $userIP,
    ]);

    if ($saved) {
      drupal_json_output([
        'condition' => 'success',
      ]);

      if (valid_email_address($emailReceiver)) {
        drupal_mail(
          'text_mistakes_reports',
          'mistake_report_mail',
          $emailReceiver,
          language_default(),
          $params = [
            'Entity ID' => $entityId,
            'Revision ID' => $revisionId,
            'Entity Type' => $entityType,
            'Entity Link' => $entityLink,
            'Date of Create' => $currentDate->format('Y-m-d H:i:s'),
            'Field Name Label' => $fieldNameLabel,
            'Field Name ID' => $fieldNameId,
            'Selected Text' => $selectedText,
            'Username' => $username,
            'User IP' => $userIP,
          ],
          $from = variable_get('smtp_from'),
          $send = TRUE
        );
      }
    }
    else {
      drupal_json_output([
        'condition' => 'failure',
        'errorText' => t('Sorry but your report not saved, pls try again'),
      ]);
    }
  }
  else {
    drupal_json_output([
      'condition' => 'failure',
      'errorText' => t('Sorry but you cant sending reports anymore today.'),
    ]);
  }
}

/**
 * Getting ajax request of report delete, delete report,
 * getting records rows for current page and
 * sending report with this parametres:
 * - htmlGrid - html with grid
 * - maxPage - max amount of pages in report grid
 * - currentPage - current page in grid (if deleted record was last)
 */
function text_mistakes_reports_ajax_grid_delete() {
  $reportId = (isset($_POST['reportId']) ? $_POST['reportId'] : NULL);
  $currentPage = (isset($_POST['currentPage']) ? $_POST['currentPage'] : NULL);

  text_mistakes_reports_delete($reportId);

  $rows = text_mistakes_reports_get_reports_rows_from_table($currentPage);
  if (($currentPage > 0) && (!$rows)) {
    $currentPage--;
    $rows = text_mistakes_reports_get_reports_rows_from_table($currentPage);
  }

  $amountReports = text_mistakes_reports_get_amount_reports();

  drupal_json_output([
    'htmlGrid' => theme('text_mistakes_reports_grid_theme', ['rows' => $rows]),
    'maxPage' => ceil($amountReports / RECORD_PER_PAGE),
    'currentPage' => $currentPage,
  ]);
}

/**
 * Getting ajax request of grid page,
 * getting records rows for current page and
 * sending report with this parametres:
 * - htmlGrid - html with grid
 * - maxPage - max amount of pages in report grid
 */
function text_mistakes_reports_ajax_grid_get_page() {
  $currentPage = (isset($_POST['currentPage']) ? $_POST['currentPage'] : NULL);

  $rows = text_mistakes_reports_get_reports_rows_from_table($currentPage);
  $amountReports = text_mistakes_reports_get_amount_reports();

  drupal_json_output([
    'htmlGrid' => theme('text_mistakes_reports_grid_theme', ['rows' => $rows]),
    'maxPage' => ceil($amountReports / RECORD_PER_PAGE),
  ]);
}

/**
 * Implements hook_mail().
 */
function text_mistakes_reports_mail($key, &$message, $params) {
  switch ($key) {
    case 'mistake_report_mail':
      $message['subject'] = t('Mistake Report');

      foreach ($params as $key => $value) {
        if ($key === 'Entity Link') {
          $message['body'][] = t('@key: <a href="@value">@value</a>,',
            ['@key' => $key, '@value' => $value]);
        }
        else {
          $message['body'][] = t('@key: @value,',
            ['@key' => $key, '@value' => $value]);
        }
      }
      break;
  }
}

/**
 * Implements hook_menu().
 */
function text_mistakes_reports_menu() {
  $items = [];

  $items['admin/config/content/text_mistakes_reports'] = [
    'title' => t('Sender of Text Mistakes Reports'),
    'description' => t('A module that add popup to field types "long text"'),
    'page callback' => 'drupal_get_form',
    'page arguments' => ['text_mistakes_reports_form'],
    'access arguments' => ['access administration pages'],
    'type' => MENU_NORMAL_ITEM,
  ];

  $items['admin/reports/text_mistakes_reports'] = [
    'title' => t('Sender of Text Mistakes Reports'),
    'description' => t('showing received mistakes reports'),
    'page callback' => 'text_mistakes_reports_reports_page',
    'access arguments' => ['access administration pages'],
    'type' => MENU_NORMAL_ITEM,
  ];

  $items['text_mistakes_reports/ajax/send/report'] = [
    'type' => MENU_CALLBACK,
    'page callback' => 'text_mistakes_reports_ajax_report',
    'access arguments' => ['access content'],
  ];

  $items['text_mistakes_reports/ajax/grid/delete'] = [
    'type' => MENU_CALLBACK,
    'page callback' => 'text_mistakes_reports_ajax_grid_delete',
    'access arguments' => ['access content'],
  ];

  $items['text_mistakes_reports/ajax/grid/page'] = [
    'type' => MENU_CALLBACK,
    'page callback' => 'text_mistakes_reports_ajax_grid_get_page',
    'access arguments' => ['access content'],
  ];

  return $items;
}

/**
 * Setting page 'admin/reports/text_mistakes_reports' with Report Grid
 *
 * @return string
 * html of report grid
 * @throws \Exception
 */
function text_mistakes_reports_reports_page() {
  $amountReports = text_mistakes_reports_get_amount_reports();

  drupal_add_js(drupal_get_path('module',
      'text_mistakes_reports') . '/js/grid.js');

  drupal_add_js([
    'textMistakesReportsAjax' => [
      'gridDeleteUrl' => url('text_mistakes_reports/ajax/grid/delete'),
      'gridPageUrl' => url('text_mistakes_reports/ajax/grid/page'),
      'gridMaxPage' => ceil($amountReports / RECORD_PER_PAGE),
    ],
  ], 'setting');

  $rows = text_mistakes_reports_get_reports_rows_from_table();

  return theme('text_mistakes_reports_grid_theme', ['rows' => $rows]);
}

/**
 * Implements hook_form().
 */
function text_mistakes_reports_form($form, &$form_state) {
  $form['text_mistakes_reports_email_receiver'] = [
    '#type' => 'textfield',
    '#title' => t('Email where sending reports'),
    '#default_value' => variable_get('text_mistakes_reports_email_receiver',
      variable_get('site_mail', '')),
    '#required' => TRUE,
    '#element_validate' => ['text_mistakes_reports_email_validate'],
  ];

  $form['text_mistakes_reports_max_text_length'] = [
    '#type' => 'textfield',
    '#title' => t('Maximum size of text length'),
    '#default_value' => variable_get('text_mistakes_reports_max_text_length',
      50),
    '#size' => 4,
    '#maxlength' => 4,
    '#description' => t('The maximum size of text that can be to report'),
    '#element_validate' => ['element_validate_integer_positive'],
    '#required' => TRUE,
  ];

  $form['text_mistakes_reports_report_text'] = [
    '#type' => 'textarea',
    '#title' => t('Report Text'),
    '#default_value' => variable_get('text_mistakes_reports_report_text', ''),
    '#description' => t('Text that will show in popup'),
    '#required' => TRUE,
  ];

  $form['text_mistakes_reports_max_reports'] = [
    '#type' => 'textfield',
    '#title' => t('Maximum number of reports'),
    '#default_value' => variable_get('text_mistakes_reports_max_reports', 3),
    '#size' => 4,
    '#maxlength' => 4,
    '#description' => t('The maximum number of reports to send with one IP. If empty - unlimited'),
    '#element_validate' => ['element_validate_integer_positive'],
  ];

  return system_settings_form($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function text_mistakes_reports_form_field_ui_field_edit_form_alter(
  &$form,
  &$form_state,
  $form_id
) {
  $field = $form['#field'];
  $defaultValue = text_mistakes_reports_get_default_values($field);

  if (text_mistakes_reports_is_valid_field_type($field['type'])) {
    $form['field']['settings']['text_mistakes_reports_enabled'] = [
      '#type' => 'select',
      '#title' => t('Enable "Text Mistakes Reports" Module'),
      '#options' => [
        '1' => 'yes',
        '0' => 'no',
      ],
      '#default_value' => $defaultValue['enabled'],
    ];

    $form['field']['settings']['text_mistakes_reports_email_receiver'] = [
      '#type' => 'textfield',
      '#title' => t('Email where sending reports'),
      '#default_value' => $defaultValue['email_receiver'],
      '#element_validate' => ['text_mistakes_reports_email_validate'],
    ];

    $form['field']['settings']['text_mistakes_reports_max_text_length'] = [
      '#type' => 'textfield',
      '#title' => t('Maximum size of text length'),
      '#default_value' => $defaultValue['max_text_length'],
      '#description' => t('The maximum size of text that can be to report'),
      '#element_validate' => ['element_validate_integer_positive'],
    ];

    $form['field']['settings']['text_mistakes_reports_report_text'] = [
      '#type' => 'textarea',
      '#title' => t('Report Text'),
      '#default_value' => $defaultValue['report_text'],
      '#description' => t('Text that will show in popup'),
    ];
  }
}

/**
 * Implements hook_field_info_alter().
 *
 * @param $info
 */
function text_mistakes_reports_field_info_alter(&$info) {
  foreach ($info as $field_type => $field_type_info) {
    if (text_mistakes_reports_is_valid_field_type($field_type)) {
      $info[$field_type]['settings'] += [
        'text_mistakes_reports_enabled' => '1',
        'text_mistakes_reports_email_receiver' => variable_get('text_mistakes_reports_email_receiver'),
        'text_mistakes_reports_max_text_length' => variable_get('text_mistakes_reports_max_text_length'),
        'text_mistakes_reports_report_text' => variable_get('text_mistakes_reports_report_text'),
      ];
    }
  }
}

/**
 * Validation for email fields
 *
 * @param $element
 * @param $form_state
 * @param $form
 */
function text_mistakes_reports_email_validate($element, &$form_state, $form) {
  $value = $element['#value'];
  if (!valid_email_address($value)) {
    form_error($element, t('Please enter a valid email address.'));
  }
}

/**
 * Getting default configuration values for current field from module configs
 *
 * @param $field
 *
 * @return array
 */
function text_mistakes_reports_get_default_values($field) {
  $defaultValue = [];

  $globalValueReceiverEmail = variable_get('text_mistakes_reports_email_receiver');
  $globalValueMaxTextLength = variable_get('text_mistakes_reports_max_text_length');
  $globalValueReportText = variable_get('text_mistakes_reports_report_text');

  $defaultValue['email_receiver'] = !empty($field['settings']['text_mistakes_reports_email_receiver']) ?
    $field['settings']['text_mistakes_reports_email_receiver'] :
    $globalValueReceiverEmail;

  $defaultValue['max_text_length'] = !empty($field['settings']['text_mistakes_reports_max_text_length']) ?
    $field['settings']['text_mistakes_reports_max_text_length'] :
    $globalValueMaxTextLength;

  $defaultValue['report_text'] = !empty($field['settings']['text_mistakes_reports_report_text']) ?
    $field['settings']['text_mistakes_reports_report_text'] :
    $globalValueReportText;

  $defaultValue['enabled'] = key_exists('text_mistakes_reports_enabled',
    $field['settings']) ?
    $field['settings']['text_mistakes_reports_enabled'] :
    1;

  return $defaultValue;
}

/**
 * Prepare configs of fields for sending into js
 *
 * @return array
 */
function text_mistakes_reports_get_fields_settings_for_page() {
  $observedFields = [];
  $allFields = field_info_fields();
  foreach ($allFields as $field) {
    if ((text_mistakes_reports_is_valid_field_type($field['type'])) && ($field['field_name'] !== 'comment_body')) {
      if (key_exists('text_mistakes_reports_enabled', $field['settings'])) {
        if ($field['settings']['text_mistakes_reports_enabled']) {
          $observedFields[$field['field_name']]['fieldName'] = $field['field_name'];
          $observedFields[$field['field_name']]['receiverEmail'] = $field['settings']['text_mistakes_reports_email_receiver'];
          $observedFields[$field['field_name']]['maxLength'] = $field['settings']['text_mistakes_reports_max_text_length'];
          $observedFields[$field['field_name']]['reportText'] = $field['settings']['text_mistakes_reports_report_text'];
        }
      }
    }
  }
  return $observedFields;
}

/**
 * Count amount of reports that user sent today
 *
 * @param $userIP
 *
 * @return int
 */
function text_mistakes_reports_get_amount_reports_by_ip($userIP) {
  $todayDate = new DateTime();
  $query = db_select('text_mistakes_report', 'r');
  $query->fields('r', [
    'report_id',
  ]);
  $query->condition('user_ip', $userIP);
  $query->condition('date_create', $todayDate->format('Y-m-d'), '>=');
  $rows = $query->execute()->fetchAll();

  return count($rows);
}

/**
 * Count amount of reports in table
 *
 * @return int
 */
function text_mistakes_reports_get_amount_reports() {
  $query = db_select('text_mistakes_report', 'r');
  $query->fields('r', [
    'report_id',
  ]);
  $rows = $query->execute()->fetchAll();

  return count($rows);
}

/**
 * Getting reports for current page and converting them for view in grid
 *
 * @param int $currentPage
 *
 * @return array
 */
function text_mistakes_reports_get_reports_rows_from_table($currentPage = 0) {
  $records = text_mistakes_reports_load_multiple_interval($currentPage * RECORD_PER_PAGE,
    RECORD_PER_PAGE);

  return text_mistakes_reports_convert_records_to_needed_view($records);
}

/**
 * Converting records for view in grid
 *
 * @param $records
 *
 * @return array
 */
function text_mistakes_reports_convert_records_to_needed_view($records) {
  $correctRows = [];

  foreach ($records as $index => $record) {
    $reportId = $record->report_id;
    $entityType = $record->entity_type;
    $entityId = $record->entity_id;
    $revisionId = $record->revision_id;
    $createDate = $record->date_create;
    $fieldNameId = $record->field_name;
    $selectedText = $record->selected_text;
    $userId = $record->user_id;
    $ipClien = $record->user_ip;

    $entityLink = url($entityType . '/' . $entityId . '/edit');


    $entity = entity_load($entityType, [(int) $entityId]);
    $bundle = $entity[$entityId]->type;
    $fieldNameLabel = field_info_instance($entityType, $fieldNameId,
      $bundle)['label'];
    $username = $userId ? user_load($userId)->name : 'anonymous';

    $correctRows[$index] = [
      'Report ID' => $reportId,
      'Entity ID' => $entityId,
      'Revision ID' => $revisionId,
      'Entity Type' => $entityType,
      'Entity Link' => $entityLink,
      'Date of Create' => $createDate,
      'Field Name Label' => $fieldNameLabel,
      'Field Name ID' => $fieldNameId,
      'Selected Text' => $selectedText,
      'Username' => $username,
      'User IP' => $ipClien,
    ];
  }

  return $correctRows;
}

/**
 * Checking if filed type compare with needed fields
 *
 * @param $fieldType
 *
 * @return bool
 */
function text_mistakes_reports_is_valid_field_type($fieldType) {
  return ($fieldType === 'text_long') || ($fieldType === 'text_with_summary');
}
